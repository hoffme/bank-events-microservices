// Code generated by ogen, DO NOT EDIT.

package generated

import (
	"fmt"
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// TransactionsGetParams is parameters of GET /transactions operation.
type TransactionsGetParams struct {
	Type      OptTransactionsGetType
	AccountID OptString
	State     []TransactionState
	DateFrom  OptString
	DateTo    OptString
	Currency  []Currency
	Limit     OptFloat64
	Skip      OptFloat64
	OrderBy   OptTransactionsGetOrderBy
	OrderDir  OptTransactionsGetOrderDir
}

func unpackTransactionsGetParams(packed middleware.Parameters) (params TransactionsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Type = v.(OptTransactionsGetType)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "account_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AccountID = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.State = v.([]TransactionState)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "date_from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.DateFrom = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "date_to",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.DateTo = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "currency",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Currency = v.([]Currency)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "skip",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Skip = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "order_by",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OrderBy = v.(OptTransactionsGetOrderBy)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "order_dir",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OrderDir = v.(OptTransactionsGetOrderDir)
		}
	}
	return params
}

func decodeTransactionsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params TransactionsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal TransactionsGetType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = TransactionsGetType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Type.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: account_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "account_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAccountIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAccountIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AccountID.SetTo(paramsDotAccountIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "account_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStateVal TransactionState
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStateVal = TransactionState(c)
						return nil
					}(); err != nil {
						return err
					}
					params.State = append(params.State, paramsDotStateVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.State {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: date_from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "date_from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDateFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDateFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DateFrom.SetTo(paramsDotDateFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "date_from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: date_to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "date_to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDateToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDateToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DateTo.SetTo(paramsDotDateToVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "date_to",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: currency.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "currency",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotCurrencyVal Currency
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotCurrencyVal = Currency(c)
						return nil
					}(); err != nil {
						return err
					}
					params.Currency = append(params.Currency, paramsDotCurrencyVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				var failures []validate.FieldError
				for i, elem := range params.Currency {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "currency",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: skip.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "skip",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSkipVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotSkipVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Skip.SetTo(paramsDotSkipVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Skip.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "skip",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: order_by.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order_by",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderByVal TransactionsGetOrderBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderByVal = TransactionsGetOrderBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.OrderBy.SetTo(paramsDotOrderByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.OrderBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "order_by",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: order_dir.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "order_dir",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOrderDirVal TransactionsGetOrderDir
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOrderDirVal = TransactionsGetOrderDir(c)
					return nil
				}(); err != nil {
					return err
				}
				params.OrderDir.SetTo(paramsDotOrderDirVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.OrderDir.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "order_dir",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// TransactionsTransactionIDGetParams is parameters of GET /transactions/{transaction_id} operation.
type TransactionsTransactionIDGetParams struct {
	// Identify uuid from Transaction.
	TransactionID string
}

func unpackTransactionsTransactionIDGetParams(packed middleware.Parameters) (params TransactionsTransactionIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "transaction_id",
			In:   "path",
		}
		params.TransactionID = packed[key].(string)
	}
	return params
}

func decodeTransactionsTransactionIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params TransactionsTransactionIDGetParams, _ error) {
	// Decode path: transaction_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "transaction_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TransactionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "transaction_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TransactionsTransactionIDPutParams is parameters of PUT /transactions/{transaction_id} operation.
type TransactionsTransactionIDPutParams struct {
	// Identify uuid from Transaction.
	TransactionID string
}

func unpackTransactionsTransactionIDPutParams(packed middleware.Parameters) (params TransactionsTransactionIDPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "transaction_id",
			In:   "path",
		}
		params.TransactionID = packed[key].(string)
	}
	return params
}

func decodeTransactionsTransactionIDPutParams(args [1]string, argsEscaped bool, r *http.Request) (params TransactionsTransactionIDPutParams, _ error) {
	// Decode path: transaction_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "transaction_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TransactionID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "transaction_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
