// Code generated by ogen, DO NOT EDIT.

package generated

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// TransactionsGet implements GET /transactions operation.
	//
	// Search transactions.
	//
	// GET /transactions
	TransactionsGet(ctx context.Context, params TransactionsGetParams) (*TransactionsGetOK, error)
	// TransactionsTransactionIDGet implements GET /transactions/{transaction_id} operation.
	//
	// Get transaction with id.
	//
	// GET /transactions/{transaction_id}
	TransactionsTransactionIDGet(ctx context.Context, params TransactionsTransactionIDGetParams) (*Transaction, error)
	// TransactionsTransactionIDPut implements PUT /transactions/{transaction_id} operation.
	//
	// Create new Transaction.
	//
	// PUT /transactions/{transaction_id}
	TransactionsTransactionIDPut(ctx context.Context, req OptTransactionsTransactionIDPutReq, params TransactionsTransactionIDPutParams) (*TransactionsTransactionIDPutCreated, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
